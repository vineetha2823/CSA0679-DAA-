#include <stdio.h>
#include <stdbool.h>
#define N 4
int findMinRow(int costMatrix[N][N], int row)
{
	int j;
    int minCost = 9999;
    for (j = 0; j < N; j++)
    {
        if (costMatrix[row][j] < minCost)
            minCost = costMatrix[row][j];
    }
    return minCost;
}
int findMinCol(int costMatrix[N][N], int col)
{
	int i;
    int minCost = 9999;
    for (i = 0; i < N; i++)
    {
        if (costMatrix[i][col] < minCost)
            minCost = costMatrix[i][col];
    }
    return minCost;
}
int calculateLowerBound(int costMatrix[N][N], bool assigned[N])
{
	int i;
    int lowerBound = 0;
    for (i = 0; i < N; i++)
    {
        if (assigned[i])
            lowerBound += findMinRow(costMatrix, i);
    }
    for (i = 0; i < N; i++)
    {
        if (!assigned[i])
            lowerBound += findMinCol(costMatrix, i);
    }
    return lowerBound;
}
void branchAndBound(int costMatrix[N][N])
{
    bool assigned[N] = {false};
    int assignedCount = 0;     
    int lowerBound = 0;  
    int minCost = 9999;         
    assigned[0] = true;
    assignedCount = 1;
    lowerBound = calculateLowerBound(costMatrix, assigned);
    void solve(int costMatrix[N][N], int worker, int currentCost)
    {
        if (assignedCount == N)
        {
            if (currentCost < minCost)
                minCost = currentCost;
            return;
        }
        int i;
        if (currentCost >= lowerBound)
            return;
        for (i = 0; i < N; i++)
        {
            if (!assigned[i])
            {
                assigned[i] = true;
                assignedCount++;
                int newCost = currentCost + costMatrix[worker][i];
                solve(costMatrix, worker + 1, newCost);
                assigned[i] = false;
                assignedCount--;
            }
        }
    }
    solve(costMatrix, 1, 0);
    printf("Minimum Cost: %d\n", minCost);
}
int main()
{
    int costMatrix[N][N] = {
        {9, 2, 7, 8},
        {6, 4, 3, 7},
        {5, 8, 1, 8},
        {7, 6, 9, 4}
    };
    branchAndBound(costMatrix);
    return 0;
}
